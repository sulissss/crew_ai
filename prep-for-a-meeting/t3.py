from crewai import Agent, Task, Crew, Process
from langchain_community.llms.ollama import Ollama
from textwrap import dedent
from langchain.agents import tool
import json
import os
os.environ["OPENAI_API_KEY"] = "NA"

llm = Ollama(model = "llama3.1")

@tool
def save_text_to_file(llm_response: str):
    """Save your text here locally"""
    with open("t3_python.txt", 'w') as file:
        file.write(llm_response)
    return "File Saved"

@tool
def save_jsonobject_to_file(llm_response: dict):
    """Save your JSON object here locally"""
    with open("t3_python.json", 'w') as file:
        file.write(llm_response)
    return "File Saved"

@tool
def convert_jsonobject_to_text(json_obj: dict):
    """Convert a JSON object to text"""
    return json.dumps(json_obj)


# Agent to extract agenda
note_taker = Agent(
    role="Professional Note-Taker for a Meeting",
    goal=f"""Extract the agenda, summary, and discussion points from meeting transcript. Send your thought and final output to the backup agent, and exit the program when you've sent it you're done with it.""",
    backstory=dedent("""You are a note-taker for meetings. You are always handed out meeting transcripts, which are sometimes
                        easier to understand, but sometimes they make no sense. This is due to the fact that they are directly 
                        transcribed from audio to text, which does result in a lot of transcription issues due to a difference in accents, distance from the microphone, etc.
                        You need to decipher, judging by the context of the meeting and using your LLM reasoning, whether the dialogue mentioned in the script was truly spoken by the said person
                        or was it just a mere transcription error. You also need to filter out any explicit content that's spoken in the meetings."""),
    verbose=True,     
    max_iter=1,
    tools=[save_text_to_file, save_jsonobject_to_file],           
    llm=llm
)

backup_agent = Agent(
    role="A File Saver",
    goal="You convert any input given to you, to text and store it in a text file.",
    backstory="You have always known to save everything that comes your way.",
    verbose=True,
    tools=[save_text_to_file, save_jsonobject_to_file, convert_jsonobject_to_text],
    llm=llm
)

meeting_transcript = "Here is the sample meeting transcript..."
with open('/Applications/Documents/Project_2_Meeting_Minutes/that_meeting.txt', 'r') as file:
    meeting_transcript = file.read()

# Task for Note-Taker Agent
task = Task(
    description=f""""Extract the agenda, summary, and discussion points from the following meeting transcript. Send your thought and output to the backup agent after the first iteration.
                    Meeting Transcript: {meeting_transcript}""",
    agent=note_taker,
    expected_output="""A JSON object of the following format:
                        {
                            "agenda": <the-agenda> (one line),
                            "summary": <the-summary> (300 words),
                            "discussion": [
                                {
                                    "discussion_point": <discussion_point>,
                                    "person_responsible": <person_responsible>,
                                    "completion_date": <completion_date>,
                                    "remarks": <the_remarks>
                                },
                                {
                                    "discussion_point": "It was suggested to use a recursive approach to boost context, where the response is passed as input and then answered recursively.",
                                    "person_responsible": "-",
                                    "completion_date": <completion_date>,
                                    "remarks": <the_remarks>
                                },
                                {
                                    "discussion_point": "Another option mentioned was using API endpoints to improve the chatbot.",
                                    "person_responsible": "-",
                                    "completion_date": <completion_date>,
                                    "remarks": <the_remarks>
                                }
                            ]
                        }
                        """
)

backup_task = Task(description=f"Store the JSON object generated by the other agent",
			  agent=backup_agent,
			  expected_output="An affirmation if the data has been saved, along with the file path where it was saved.")

crew = Crew(
    agents=[note_taker, backup_agent],
    tasks=[task, backup_task],
    # process=Process.sequential
)

print("starting")
result = crew.kickoff()

print("\n\ndone:\n\n")
print(result)