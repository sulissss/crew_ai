from crewai import Agent, Task, Crew, Process
from langchain_community.llms.ollama import Ollama
from textwrap import dedent
from langchain.agents import tool
import os
import json

os.environ["OPENAI_API_KEY"] = "NA"

llm = Ollama(model="llama3.1")
num_iter = 1
        
@tool
def save_text_to_file(llm_response: str):
    """Save your text here locally"""
    with open("t3_python.txt", 'w') as file:
        file.write(llm_response)
    return "File Saved"

@tool
def save_jsonobject_to_file(llm_response: dict):
    """Save your JSON object here locally"""
    with open("t3_python.json", 'w') as file:
        file.write(llm_response)
    return "File Saved"

# Agent to extract agenda
note_taker = Agent(
    role="Professional Note-Taker for a Meeting",
    goal=f"""Extract the agenda, summary, and discussion points from meeting transcript. Save your output in a file, and do not exceed the maximum iterations, i.e. 10""",
    backstory=dedent("""You are a note-taker for meetings. You are always handed out meeting transcripts, which are sometimes
                        easier to understand, but sometimes they make no sense. This is due to the fact that they are directly 
                        transcribed from audio to text, which does result in a lot of transcription issues due to a difference in accents, distance from the microphone, etc.
                        You are the sole agent in this crew."""),
    verbose=True,     
    tools=[save_text_to_file, save_jsonobject_to_file],           
    llm=llm
)

# Meeting_Reviewer = Agent(
#     role="You review the meeting minutes and make it professionally. ",
#     goal=f"""You review the meeting minutes from the note taker agent and make it professionally and save it as JSON file locally. You will use max of 2 iteration and hence your review should be crisp and perfect. Exit the program once you're done with it.""",
#     backstory=f"You review the meeting minutes and make it professionally. You recive the meeting minutes from the note-taker agent",
#     verbose=True,     
#     tools=[save_text_to_file, save_jsonobject_to_file],           
#     llm=llm
# )


formatting_agent = Agent(role="Meeting Report Reviewer",
                goal="Review the meeting insights generated from the note-taker agent, and form a JSON object as output under a specific format.",
                backstory="""You are a highly rated, and highly experienced meeting report reviewer. You review the reports generated by the other agent, and give them feedback accordingly.""",
                verbose=True,
                tools=[save_text_to_file, save_jsonobject_to_file],
                llm=llm)

meeting_transcript = "Here is the sample meeting transcript..."
with open('/Applications/Documents/Project_2_Meeting_Minutes/that_meeting.txt', 'r') as file:
    meeting_transcript = file.read()

# Task for Note-Taker Agent
note_taking_task = Task(
    description=f""""Decipher the context of the meeting using your LLM reasoning, whether the dialogue mentioned in the script was truly spoken by the said person
                    or was it just a mere transcription error. Extract the agenda, summary, and discussion points from the following meeting transcript.
                    Meeting Transcript: {meeting_transcript}""",
    agent=note_taker,
    expected_output="""A JSON object of the following format:
                        {
                            "agenda": <the-agenda> (one line),
                            "summary": <the-summary> (300 words),
                            "discussion": [
                                {
                                    "discussion_point": <discussion_point>,
                                    "person_responsible": <person_responsible>,
                                    "completion_date": <completion_date>,
                                    "remarks": <the_remarks>
                                },
                                {
                                    "discussion_point": "It was suggested to use a recursive approach to boost context, where the response is passed as input and then answered recursively.",
                                    "person_responsible": "-",
                                    "completion_date": <completion_date>,
                                    "remarks": <the_remarks>
                                },
                                {
                                    "discussion_point": "Another option mentioned was using API endpoints to improve the chatbot.",
                                    "person_responsible": "-",
                                    "completion_date": <completion_date>,
                                    "remarks": <the_remarks>
                                }
                            ]
                        }
                        """
)

# backup_task = Task(description=f"Collect the response data from the other agent, and save them to a local file. Then, verify if the file was saved correctly.",
# 			  agent=backup_agent,
# 			  expected_output="An affirmation if the data has been saved, along with the file path where it was saved.")

formatting_task = Task(
    description=f""""Review the meeting reports generated by the other agent, and compile the output of the agent
                    into a JSON object in the specified format.""",
    agent=formatting_agent,
    expected_output="""A JSON object of the following format:
                        {
                            "agenda": <the-agenda> (one line),
                            "summary": <the-summary> (300 words),
                            "discussion": [
                                {
                                    "discussion_point": <discussion_point>,
                                    "person_responsible": <person_responsible>,
                                    "completion_date": <completion_date>,
                                    "remarks": <the_remarks>
                                },
                                {
                                    "discussion_point": <discussion_point>,
                                    "person_responsible": <person_responsible>,
                                    "completion_date": <completion_date>,
                                    "remarks": <the_remarks>
                                },
                                {
                                    "discussion_point": <discussion_point>,
                                    "person_responsible": <person_responsible>,
                                    "completion_date": <completion_date>,
                                    "remarks": <the_remarks>
                                }
                            ]
                        }
                        """
)


crew = Crew(
    agents=[note_taker, formatting_agent],
    tasks=[note_taking_task, formatting_task],
    verbose=2
    # process=Process.sequential
)

print("starting")
result = crew.kickoff()

print("\n\ndone:\n\n")
print(result)

if __name__ == "__main__":
    pass