from crewai import Agent, Task, Crew, Process
from langchain_community.llms.ollama import Ollama
from textwrap import dedent
from langchain.agents import tool
import os
import json

os.environ["OPENAI_API_KEY"] = "NA"

llm = Ollama(model="llama3.1")

def call_back(output: str):
    with open("callback_resp.txt", 'w') as file:
        file.write(output)

@tool("Save Output to File")
def save_to_file(llm_response: str):
    """Useful to save the response generated by the Note-Taker agent
        - A mandatory function to provide backup
        - This function should be called after each iteration of the Note-Taker agent

        :param content: str, content to be stored in a file"""
    with open("llm_response.txt", 'w') as file:
        file.write(llm_response)
    print("Saved to file")
    print(f"The LLM response: {llm_response}")
    return "Saved to file: llm_response.txt"

def cache_func(args, result):
    print(f"Cache: {result}")   
    return result

# Agent to extract agenda
note_taker = Agent(
    role="Professional Note-Taker for a Meeting",
    goal="""Extract the agenda, summary, and discussion points from meeting transcripts. Save your output after each iteration into a local file using the provided tool.
            Only use the tool to save to the file, do not do it on your own.""",
    backstory=dedent("""You are a note-taker for meetings. You are always handed out meeting transcripts, which are sometimes
                        easier to understand, but sometimes they make no sense. This is due to the fact that they are directly 
                        transcribed from audio to text, which does result in a lot of transcription issues due to a difference in accents, distance from the microphone, etc.
                        You need to decipher, judging by the context of the meeting and using your LLM reasoning, whether the dialogue mentioned in the script was truly spoken by the said person
                        or was it just a mere transcription error. You also need to filter out any explicit content that's spoken in the meetings. All in all, expect the transcript to be
                        senseless, and derive context out of it. That is your job to do! Also, you'll be working with a Validation Agent who'll be monitoring and validating your responses."""),
    verbose=True,     
    tools=[save_to_file],           
    llm=llm
)

# Sample meeting transcript
meeting_transcript = "Here is the sample meeting transcript..."
with open('/Users/sulaiman/Desktop/transcript.txt', 'r') as file:
    meeting_transcript = file.read()

# Task for Note-Taker Agent
task = Task(
    description=f""""Extract the agenda, summary, and discussion points from the following meeting transcript: 
                    {meeting_transcript}""",
    agent=note_taker,
    output_file='llm_response.txt',
    expected_output="""A JSON object of the following format. For example, if you have the output for summary, you should
                        insert your output in <the-summary> after "summary". The parenthesis mentions the word/line limit for each output.
                        Write "-" in front of any field who's data is unavailable.  
                        Save the output for each iteration to a file using ONLY the tools available to the agent:
                        {
                            "agenda": <the-agenda> (one line),
                            "summary": <the-summary> (300 words),
                            "discussion": [
                                {
                                    "discussion_point": <discussion_point>,
                                    "person_responsible": <person_responsible>,
                                    "completion_date": <completion_date>,
                                    "remarks": <the_remarks>
                                },
                                {
                                    "discussion_point": "It was suggested to use a recursive approach to boost context, where the response is passed as input and then answered recursively.",
                                    "person_responsible": "-",
                                    "completion_date": <completion_date>,
                                    "remarks": <the_remarks>
                                },
                                {
                                    "discussion_point": "Another option mentioned was using API endpoints to improve the chatbot.",
                                    "person_responsible": "-",
                                    "completion_date": <completion_date>,
                                    "remarks": <the_remarks>
                                }
                            ]
                        }
                        """
)

crew = Crew(
    agents=[note_taker],
    tasks=[task]
)

print("starting")
result = crew.kickoff()

print("\n\ndone:\n\n")
print(result)
